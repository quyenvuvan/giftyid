import { NextResponse } from 'next/server';
import { sendConsultationEmail } from '@/lib/email';

// Function to verify reCAPTCHA
async function verifyRecaptcha(token: string): Promise<boolean> {
  const secretKey = process.env.RECAPTCHA_SECRET_KEY;
  
  if (!secretKey) {
    console.error('reCAPTCHA secret key not found');
    return false;
  }

  try {
    const response = await fetch('https://www.google.com/recaptcha/api/siteverify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `secret=${secretKey}&response=${token}`,
    });

    const data = await response.json();
    return data.success === true;
  } catch (error) {
    console.error('Error verifying reCAPTCHA:', error);
    return false;
  }
}

export async function POST(request: Request) {
  try {
    const formData = await request.json();

    // Validate d·ªØ li·ªáu c∆° b·∫£n
    if (!formData.name || !formData.phone || !formData.email) {
      return NextResponse.json(
        { error: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc' },
        { status: 400 }
      );
    }

    // Verify reCAPTCHA - Skip for development
    if (!formData.recaptchaToken || formData.recaptchaToken === 'development-skip') {
      console.log('Skipping reCAPTCHA validation for development');
    } else {
      const isValidRecaptcha = await verifyRecaptcha(formData.recaptchaToken);
      if (!isValidRecaptcha) {
        return NextResponse.json(
          { error: 'X√°c th·ª±c reCAPTCHA th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.' },
          { status: 400 }
        );
      }
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      return NextResponse.json(
        { error: 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng' },
        { status: 400 }
      );
    }

    // Validate phone number (Vietnamese format) - Support more flexible formats
    const cleanPhone = formData.phone.replace(/\s+/g, '').replace(/[-().]/g, '');
    const phoneRegex = /^(0[235789])[0-9]{8}$/;
    if (!phoneRegex.test(cleanPhone)) {
      return NextResponse.json(
        { error: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng 02, 03, 05, 07, 08 ho·∫∑c 09' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra c·∫•u h√¨nh email
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.log('‚ö†Ô∏è Email not configured, returning mock success for testing');
      console.log('üìù Form data would be sent:', {
        name: formData.name,
        phone: cleanPhone,
        email: formData.email,
        package: formData.package,
        company: formData.company,
        hasMessage: !!formData.message
      });
      
      return NextResponse.json(
        { 
          message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! (Email ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh) Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 24 gi·ªù.',
          success: true 
        },
        { status: 200 }
      );
    }

    // G·ª≠i email v·ªõi s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
    const result = await sendConsultationEmail({
      name: formData.name,
      phone: cleanPhone,
      email: formData.email,
      package: formData.package,
      company: formData.company,
      message: formData.message
    });

    if (result.success) {
      return NextResponse.json(
        { 
          message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 24 gi·ªù.',
          success: true 
        },
        { status: 200 }
      );
    } else {
      console.error('‚ùå Email send failed:', result.error);
      throw new Error('L·ªói g·ª≠i email');
    }
  } catch (error) {
    console.error('L·ªói x·ª≠ l√Ω form:', error);
    return NextResponse.json(
      { error: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i sau.' },
      { status: 500 }
    );
  }
} 